oger Skyline
Corrrection:
- sudo apt-get update && sudo apt-get upgrade
- sudo apt list --installed
- sudo adduser test
- sudo usermod -aG sudo test
- su test (become test) --> groups
- sudo apt-get update
- cat etc/network/interfaces --> static
- sudo systemctl status sshd.service
Setup VM:
- Sympolic link to sgoinfre:
- rm -fr virtualbox\ vms
- ln -s goinfre/sgoinfre/goinfre/Perso/yuxu VirtualBox\ VMs
- 4.2 Go Partition --> 3.9 GiB
check with fdisk -l
apt-get install :
sudo
update
upgrade
vim
ssh
ufw
mailutils
iptables-persistent
fail2ban
portsentry
maybe need
open
bridge-utils
Iterms set-up:
1. Create natnets:
vboxmanage natnetwork add --netname yuxunat --network 10.10.10.0/30 --enable --dhcp off
example : ➜  ~ vboxmanage list natnets
NetworkName:    42nat
IP:             10.0.0.1
Network:        10.0.0.0/30
IPv6 Enabled:   No
IPv6 Prefix:    fd17:625c:f037:2::/64
DHCP Enabled:   No
Enabled:        Yes
loopback mappings (ipv4)
        127.0.0.1=2
		2. VBoxManage list hostonlyifs / natnets
		Steps:vboxmanage startvm Roger Skyline
		1. Add adapter in setting and edit /etc/network/interface page to connect to internet / ip a to see all networks' names (sudo reboot to see diffs)
		2. apt-get install all the services
		3. add user to sudoer --- root: usermod -aG sudo yuxu
		4. ssh-keygen in host AND vm --> it will genenrate private key id_rsa and public_key id_rsa.pub
		5. copy the id_rsa.pub from host to authorized_keys in vm (both are in .ssh folders)
		cat ~/id_rsa.pub >> ~/.ssh/authorized_keys
		if this happens :
			@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
			@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
			@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
			IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
			Someone could be eavesdropping on you right now (man-in-the-middle attack)!
			It is also possible that a host key has just been changed.
			The fingerprint for the ECDSA key sent by the remote host is
			SHA256:SSTjINGpOUamCI6QKkVIGZNFW8yucHTUquot6OV8a98.
			Please contact your system administrator.
			Add correct host key in /Users/yuxu/.ssh/known_hosts to get rid of this message.
			Offending ECDSA key in /Users/yuxu/.ssh/known_hosts:2
			ECDSA host key for 192.168.99.2 has changed and you have requested strict checking.
			Host key verification failed.
			--> remove the knownhost file in .ssh on host--> the system will create a new host
			6. sudo vim /etc/ssh/sshd_config
			- change the port number -> not 22
			- passwordauthentication -> no
			- permitrootlogin -> no
			- remove # so they work
			==> reboot
			see the port :sudo systemctl status sshd.service
			7. ssh -p [port of your choice] user@hostonlyinterface ex: ssh -p 22 yuxu@192.168.99.2
			8. sudo service sshd/ssh/networking status
			if there are problems: sudo /etc/init.d/ssh or networking restart
				9. sudo service --status-all
				10. sudo [service name] stop --> for the service not related to this project
				11. Firewall:
#list all the rules :
				sudo iptables -S
				sudo iptables -L
				put the following script into a .sh file --> example: iptable_script.sh
#clean up the existing rules
				sudo iptables -t filter -F
				sudo iptables -t filter -X
# stop everything
				sudo iptables -t filter -P INPUT DROP
				sudo iptables -t filter -P FORWARD DROP
				sudo iptables -t filter -P OUTPUT DROP
# keep the connections
				sudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
				sudo iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
# allow loopback
				sudo iptables -t filter -A INPUT -i lo -j ACCEPT
				sudo iptables -t filter -A OUTPUT -o lo -j ACCEPT
# refuse the icpm requests (ping)
				sudo iptables -t filter -A INPUT -p icmp -j DROP
				sudo iptables -t filter -A OUTPUT -p icmp -j DROP
# ssh ok --> 112 is the port i chose
				sudo iptables -t filter -A INPUT -p tcp --dport 112 -j ACCEPT
				sudo iptables -t filter -A OUTPUT -p tcp --dport 112 -j ACCEPT
# http ok
				sudo iptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT
				sudo iptables -t filter -A OUTPUT -p tcp --dport 80 -j ACCEPT
# https ok
				sudo iptables -t filter -A INPUT -p tcp --dport 443 -j ACCEPT
				sudo iptables -t filter -A INPUT -p tcp --dport 8443 -j ACCEPT
				sudo iptables -t filter -A OUTPUT -p tcp --dport 443 -j ACCEPT
# dns ok
				sudo iptables -t filter -A INPUT -p tcp --dport 53 -j ACCEPT
				sudo iptables -t filter -A INPUT -p udp --dport 53 -j ACCEPT
				sudo iptables -t filter -A OUTPUT -p tcp --dport 53 -j ACCEPT
				sudo iptables -t filter -A OUTPUT -p udp --dport 53 -j ACCEPT
				after sh iptables_script.sh --> execute all the rules in the script --> sudo iptables-save > /etc/iptables/rules.v4
				12. DOS attacks protection:
				put the following script into a .sh file --> example: dos_script.sh
# block all the invalid packets
				sudo iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP
# block new packets without tcp/syn flags
				sudo iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
# block abnormal mss values
				sudo iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
# Limit all the new connections to 60/ second
				sudo iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
				sudo iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP
# forbid new connections if one client pass 80 connections
				sudo iptables -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset
# limit connections to 25 per minute
				sudo iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT
# Provent Synflood
				sudo iptables -A INPUT -p tcp --syn -m limit --limit 2/s --limit-burst 30 -j ACCEPT
# Provent Pingflood
				sudo iptables -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT
				after sh dos_script.sh --> execute all the rules in the script --> sudo iptables-save > /etc/iptables/rules.v4
				13. Protection scan de ports
				sudo iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
				sudo iptables -A INPUT -p tcp --tcp-flags ALL ALL -m limit --limit 1/h -j ACCEPT
				sudo iptables-save > /etc/iptables/rules.v4
				14. update script
				write this in a script: ex: log_script.sh in the root folder
#!/bin/bash
				apt-get update >> /var/log/update_script.log (this can only be done with root)
				apt-get upgrade >> /var/log/update_script.log
				chown root log_script.sh
				chmod 755 log_script.sh
#check with crontab -e
				add :
				0 4 * * wed root /root/scripts/log_script.sh
				@reboot root /root/scripts/log_script.sh
				so it will be executed at 4am once a week and every reboot
				15. crontab_script
				write this in a script ex: crontab_script.sh in the root folder
#!/bin/sh
				CRON_FILE=/etc/crontab
				CHECK_FILE=/root/.crontab-checker
				if [ ! -f $CHECK_FILE ] || [ "`md5sum < $CRON_FILE`" != "`cat $CHECK_FILE`" ]
					then
					echo "The crontab file has been modified !" | mail -s "root: crontab modified" root
					md5sum < $CRON_FILE > $CHECK_FILE;
					chmod 700 $CHECK_FILE;
					fi
					chown root crontab_script.sh
					chmod 755 crontab_script.sh
					crontab -e
					add :
					0 0 * * * root /root/scripts/crontab_script.sh
					​
